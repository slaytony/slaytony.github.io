{"componentChunkName":"component---src-templates-project-details-js","path":"/projects/gatsby-github/","result":{"data":{"markdownRemark":{"html":"<p>Gatsby.js는 React 기반 정적 웹사이트 생성기이다.</p>\n<p>React를 사용해서 정적인 HTML, CSS, JavaScript 파일을 생성해서, 웹 사이트를 만들 수 있다.</p>\n<p>GraphQL과 같은 기술을 사용하여 데이터를 관리하고 가져올 수 있다.</p>\n<p>플러그인과 테마가 다양해서 효과적으로 웹사이트를 만들 수 있다.</p>\n<p>Gatsby.js의 특징 중 하나는 빠른 로딩 속도와 성능 최적화.</p>\n<p>또한, Gatsby.js는 검색 엔진 최적화(SEO)에도 도움을 준다.</p>\n<p>Gatsby.js는 사이트맵(Sitemap)을 자동으로 생성하고, HTML 태그의 구조를 최적화하여 검색 엔진에서 쉽게 인식할 있다.</p>\n<p>또한, Gatsby.js는 웹사이트의 이미지를 자동으로 최적화하여 페이지 로딩 속도를 높이고, 검색 엔진에서 이미지 검색이 용이하다.</p>\n<blockquote>\n<p>Sitemap\r\n사이트맵(Sitemap)은 웹사이트의 구조와 페이지 URL 등의 정보를 담고 있는 XML 파일입니다. 이 파일을 검색 엔진에 제출하면 검색 엔진이 웹사이트의 페이지를 크롤링할 때 빠르고 효율적으로 수집할 수\r\n있습니다.</p>\n</blockquote>\n<blockquote>\n<p>SEO\r\nSEO는 검색 엔진 최적화(Search Engine Optimization)의 약어로, 웹사이트를 검색 엔진에서 노출시키기 위해 다양한 기술과 전략을 사용하는 것을 말합니다. 검색 엔진은 사용자가 검색어를 입력하면, 그에 > 맞는 검색 결과를 보여주는데, SEO는 검색 결과에서 노출되는 웹사이트의 순위를 높여, 사용자에게 노출될 확률을 높이는 것을 목적으로 합니다. 검색 엔진에서 상위에 노출될수록, 사용자에게 노출될 확률과 > 클릭률이 높아지므로, SEO는 많은 웹사이트에서 중요한 전략 중 하나입니다.</p>\n</blockquote>\n<p>Gatsby.js로 만든 블로그는 SEO에 도움이 될 수 있고,\r\n검색 엔진에서 상위에 노출되는 것은 블로그에 방문자를 유입시키기 좋은 전략이라고 하는데,\r\n방문자가 많이 들어오면 광고 수익도 챙길 수 있고 수익을 창출할 수 있습니다.</p>\n<ul>\n<li>Google AdSense\r\nGoogle AdSense와 같은 광고 네트워크를 이용하여 광고 수익을 창출할 수 있습니다. 방문자 수가 많을수록 광고 수익도 높아질 수 있습니다.</li>\n</ul>\n<p>Node.js, VSCODE, YARN</p>\n<p>Node.js는 JavaScript를 실행할 수 있는 런타임입니다.\r\nnpm(Node Package Manager)과 Yarn은 둘 다 JavaScript 패키지 매니저입니다.\r\nnpm은 Node.js 패키지 매니저로, Node.js를 설치하면 자동으로 함께 설치됩니다.\r\nYarn은 Facebook에서 만든 JavaScript 패키지 매니저입니다. Yarn은 npm보다 빠르고 안정적이며 보안 기능도 강화되어 있습니다.</p>\n<ol>\n<li>\n<p>Node.js 다운로드</p>\n<ul>\n<li>Windows에서 Node.js 설치 방법</li>\n</ul>\n<ol>\n<li>Node.js 공식 웹사이트(<a href=\"https://nodejs.org/)%EC%97%90%EC%84%9C\">https://nodejs.org/)에서</a> Windows용 설치 파일(.msi)을 다운로드합니다.</li>\n<li>다운로드한 파일을 실행합니다.</li>\n<li>Node.js 설치 마법사가 시작됩니다. 설치 마법사의 지시에 따라 설치를 진행합니다.</li>\n<li>설치가 완료되면 Node.js가 설치된 경로가 환경 변수에 자동으로 추가됩니다.</li>\n</ol>\n<ul>\n<li>macOS에서 Node.js 설치 방법</li>\n</ul>\n<ol>\n<li>Node.js 공식 웹사이트(<a href=\"https://nodejs.org/)%EC%97%90%EC%84%9C\">https://nodejs.org/)에서</a> macOS용 설치 파일(.pkg)을 다운로드합니다.</li>\n<li>다운로드한 파일을 실행합니다.</li>\n<li>Node.js 설치 마법사가 시작됩니다. 설치 마법사의 지시에 따라 설치를 진행합니다.</li>\n<li>설치가 완료되면 Node.js가 설치된 경로가 환경 변수에 자동으로 추가됩니다.</li>\n</ol>\n</li>\n<li>\n<p>yarn 설치</p>\n</li>\n</ol>\n<p>// terminal 이용 자신의 디렉토리로 가서 ex) D:></p>\n<p>npm install -g yarn</p>\n<ol start=\"3\">\n<li>Gatsby 프로젝트 만들기</li>\n</ol>\n<p>yarn global add gatsby-cli</p>\n<ol start=\"4\">\n<li>생성된 프로젝트 폴더로 이동하기</li>\n</ol>\n<p>cd <project-name></p>\n<ol start=\"5\">\n<li>gatsby 개발 서버 실행</li>\n</ol>\n<p>yarn develop</p>\n<p>GitHub pages에 배포</p>\n<ol>\n<li>Github repository 생성</li>\n</ol>\n<p>먼저, Github에 새로운 repository를 생성합니다. 이 repository는 배포할 Gatsby 프로젝트를 호스팅할 것입니다. 이후 repository 이름은 [사용자이름].github.io로 설정합니다.</p>\n<p>&#x3C;사진></p>\n<p>Repository name 에\r\n[사용자이름].github.io로 설정</p>\n<ol start=\"2\">\n<li>Gatsby 프로젝트 준비</li>\n</ol>\n<p>gatsby-plugin-github-pages 플러그인을 사용하여 빌드된 소스 코드를 repository의 gh-pages 브랜치로 배포합니다.</p>\n<p>npm 이용 : npm install --save-dev gh-pages gatsby-plugin-github-pages\r\nyarn 이용 : yarn add gh-pages gatsby-plugin-github-pages --dev</p>\n<ul>\n<li>\n<p>npm과 yarn 명령어를 번갈아서 쓰면 일반적으로는 문제가 안된다고 하는데, 한 프로젝트 내에서 두개 패키지 매니저를 혼용하면 의존성 관리에 문제가 발생한다고 하니 나같으면 yarn으로 하겠음</p>\n<ol>\n<li>gatsby-config.js 설정</li>\n</ol>\n<p>plugins: [\r\n{\r\nresolve: <code class=\"language-text\">gatsby-plugin-github-pages</code>,\r\noptions: {</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// GitHub Pages options\r\n// -------------------------------------\r\n// (optional) Use custom domain\r\n// domain: \"www.example.com\",\r\n// (optional) If you have a CNAME file\r\n// cname: \"www.example.com\",\r\n\r\n},</code></pre></div>\n<p>},</p>\n<ol start=\"2\">\n<li>package.json 설정</li>\n</ol>\n<p>{\r\n\"name\": \"my-app\",\r\n\"version\": \"1.0.0\",\r\n\"homepage\": \"<a href=\"https://github.com/slaytony/slaytony.github.io.git\">https://github.com/slaytony/slaytony.github.io.git</a>\", // 추가\r\n\"dependencies\": {\r\n\"react\": \"^17.0.2\",\r\n\"react-dom\": \"^17.0.2\"\r\n}\r\n}</p>\n<p>\"scripts\": {\r\n\"build\": \"gatsby build\",\r\n\"develop\": \"gatsby develop\",\r\n\"format\": \"prettier --write \"*<em>/</em>.{js,jsx,ts,tsx,json,md,css}\"\",\r\n\"start\": \"gatsby develop\",\r\n\"serve\": \"gatsby serve\",\r\n\"clean\": \"gatsby clean\",\r\n\"test\": \"echo \"Write tests! -> <a href=\"https://gatsby.dev/unit-testing%5C\">https://gatsby.dev/unit-testing\\</a>\" &#x26;&#x26; exit 1\",\r\n\"deploy\": \"gh-pages -d build\", // 추가\r\n\"predeploy\": \"yarn build\" // 추가\r\n},</p>\n<p>이렇게 추가하면 yarn build 또는 yarn build를 실행할 때 자동으로 생성되는 index.html 파일 내에서 정적 파일의 경로가 이 homepage 값으로 시작하도록 설정됩니다.\r\ngh-pages 패키지를 사용하여 GitHub Pages에 배포하려는 경우, homepage 값은 package.json 파일 내에서 deploy 스크립트에서 사용됩니다.\r\n위의 deploy 스크립트는 프로젝트를 빌드하고 gh-pages 패키지를 사용하여 빌드된 파일들을 public 디렉토리에 놓고 gh-pages 브랜치에 푸시합니다.</p>\n<ol start=\"3\">\n<li>빌드</li>\n</ol>\n<p>yarn build</p>\n<ol start=\"4\">\n<li>배포</li>\n</ol>\n<p>프로젝트 파일 우클릭 해서 Git Bash Here 누르고</p>\n<ul>\n<li>\n<p>Git 저장소(repository) 생성 : 현재 디렉토리 기준으로 Git repository 생성</p>\n<p>git init</p>\n</li>\n<li>\n<p>프로젝트 폴더 전체 파일 add : 추가로 작성된 파일을 저장한다.</p>\n<p>git add .</p>\n</li>\n<li>\n<p>프로젝트 폴더 전체 파일 Commit : 무엇을 추가하는지 메시지를 남긴다.</p>\n<p>git commit -m \"gatsby page\"</p>\n</li>\n<li>\n<p>Repository와 연결 : 어디로 추가할지 연결한다.</p>\n<p>git remote add origin 복붙</p>\n<ul>\n<li>위에서 만든 GitHub repository에 가서 Code 클릭하고 HTTPS 로 나오는 주소 복사해서 붙여 넣는다.</li>\n</ul>\n</li>\n<li>\n<p>Git push : 최종적으로 어떤 파일을, 메시지를 더해서, 어떤 저장소로 저장한다.</p>\n<p>git push -u origin main</p>\n</li>\n</ul>\n<ul>\n<li>배포 과정에서는 굉장히 많은 오류가 발생. 구글링해서 해결.</li>\n</ul>\n<p>자주 발생한 오류 - \"fatal: refusing to merge unrelated histories\" 오류는 두 개의 Git 저장소에서 서로 다른 커밋 기록이 있어서 병합 작업이 거부되었다는 것을 의미.</p>\n<p>해결 - 1) git pull origin main --allow-unrelated-histories 2) git add . (아무거나) 3) git commit -m \"message\" 4) git push -u origin main</p>\n<ul>\n<li>\n<p>터미널에 돌아와서</p>\n<p>yarn deploy</p>\n</li>\n</ul>\n<ol start=\"5\">\n<li>GitHub 설정</li>\n</ol>\n<ul>\n<li>모든 작업을 마치고 Repository에서 확인하면 파일 업로드 확인가능.</li>\n<li>오류 없이 잘 됐다면 gh-pages 라는 branch가 자동으로 생겨있다.</li>\n<li>Settings > Pages로 들어가서 branch를 gh-pages로 변경, Save</li>\n<li>5분 정도 있다가 Visit site로 배포 확인</li>\n</ul>\n</li>\n</ul>\n<p>HTML, CSS, JavaScript 만 이용해서 웹을 만들었다 보니 많이 해맸음.\r\nReact, Gatsby, Visual Studio Code, Node.js, npm, yarn 등 처음 써봐서 쉽지 않았음.</p>","frontmatter":{"stack":"Gatsby, Node.js","title":"Gatsby 사이트 생성, GitHub 배포","date":"2023-03-17"}}},"pageContext":{"slug":"gatsby-github"}},"staticQueryHashes":["975110654"],"slicesMap":{}}